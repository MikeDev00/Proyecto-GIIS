version: '3'

networks:
  giis_local:
    driver: bridge
  giis_proxy:
    external: true
    name: ${proxy_network}
  database1_network:
    driver: bridge

services:
  djangoapp:
    build: .
    volumes:
      - .:/opt/services/djangoapp/src
      - static_volume:/opt/services/djangoapp/staticfiles  # <-- bind the static volume
      - media_volume:/opt/services/djangoapp/media  # <-- bind the media volume
    networks:
      - ${project_name}_local
      - database1_network
    depends_on:
      - database1
    env_file:
      - ./.env
    links:
      - database1
      
  nginx:
    image: nginx:stable-alpine
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - static_volume:/opt/services/djangoapp/staticfiles  # <-- bind the static volume
      - media_volume:/opt/services/djangoapp/media  # <-- bind the media volume
      - ${root_directory}/config/${nginx_directory}/certbot/conf:/etc/letsencrypt
      - ${root_directory}/config/${nginx_directory}/certbot/www:/var/www/certbot
      - ${root_directory}/config/${nginx_directory}/certs:/etc/ssl
    depends_on:
      - djangoapp
    # Here we define our settings for traefik how to proxy our service.
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.${project_name}.entrypoints=https"
      - "traefik.http.routers.${project_name}.rule=Host(`${dominio}`)"
      - "traefik.http.routers.${project_name}.tls=true"
      - "traefik.docker.network=giis_proxy"
    networks:
      - ${project_name}_local
      - database1_network
      - giis_proxy

    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  database1:
    image: mongo:latest
    restart: always
    command: mongod --auth
    container_name: database1
    environment:
      - MONGO_INITDB_DATABASE=giis
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=mongoadmin
    ports:
      - 27017:27017
    networks:
      - ${project_name}_local
      - database1_network
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./dbmongo/data:/data/db

volumes:
  static_volume:  # <-- declare the static volume
  media_volume:  # <-- declare the media volume


# docker-compose -f ./docker-giis.yml build djangoapp
# docker-compose -f ./docker-giis.yml run djangoapp python app/manage.py collectstatic --no-input
# docker-compose -f ./docker-giis.yml up -d
# docker exec -it proyecto-giis_djangoapp_1 python app/manage.py collectstatic --no-input
# docker exec -it proyecto-giis_djangoapp_1 python app/manage.py makemigrations
# docker exec -it proyecto-giis_djangoapp_1 python app/manage.py migrate

# docker exec -it proyecto-giis_djangoapp_1 python app/manage.py createsuperuser
# docker image rm dockerpy_djangoapp
# docker-compose down
# docker-compose 